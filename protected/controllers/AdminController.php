<?php
/**
 * AdminController
 * This controller governs all of the explicit admin functionality.
 * 
 *
 * @author Jason Larke
 * @date 23/08/2012
 */
class AdminController extends Controller
{

	public function filters()
	{
		// return the filter configuration for this controller, e.g.:
		return array(
			'accessControl'
		);
	}
	
	public function accessRules()
	{
		// deny access to every action if the user is not an admin
		return array(
			array(
				'deny',
				'expression' => '!$user->hasRoles(array("admin"))'
			),
		);
	}
	
    /**
     * Index page action.
     * At the moment this simply defaults to the search
     * page as there is no specific admin index page.
     */
	public function actionIndex()
	{
		return $this->actionSearch();
	}

    /**
     * Mailout page action.
     * This action handles sending out batch emails and
     * generating CSV files of a customized member list.
     * The memberlist is generated by the SearchForm, then the
     * results are processed by the MailoutForm
     */
	public function actionMailout()
	{
        // Initialize the two forms
		$mailout = new MailoutForm();
		$search = new SearchForm();
		
        // results information to pass to the view.
		$result = array(
			'complete' => false,
			'success' => false,
			'message' => '',
			'heading' => ''
		);
		
        // User submitted the mailout form, search must be complete
		if(!empty($_POST['MailoutForm']))
		{
            // regain the search results from the session
			$search = Yii::app()->session['mailout-search'];
			$result['complete'] = true;
			$mailout->attributes=$_POST['MailoutForm'];
			$mailout->emailList = $search->runSearch();
			
			// extract the attachments (if any)
			$mailout->attachments=array();
			$uploads = CUploadedFile::getInstancesByName('attachments');
			
			if (!empty($uploads))
				foreach($uploads as $file)
					if($file->saveAs(Yii::app()->params['tempDirectory'] . $file->name))
						$mailout->attachments[] = Yii::app()->params['tempDirectory'] . $file->name;

			// validate user input and redirect to the previous page if valid
			if($mailout->validate())
			{
				$result['success'] = true;
				if ($mailout->type === 'email')
				{
                    // Try and use the currently logged in admin's membership email details as the Reply-To and Sender
                    // fields. Defaults to a noreply address.
					$admin = Membership::model()->find('LOWER(membershipId)=LOWER(?)', array(Yii::app()->user->name));
					$sender = array (
						'email' => $admin ? $admin->emailAddress : 'noreply@svenskaklubben.org.au',
						'name' => $admin ? $admin->name : 'noreply@svenskaklubben.org.au'
					);
                    //send the emails.
					$sent = $mailout->batchEmail($sender);
					
					$result['heading'] = 'Success!';
					$result['message'] = "Your email was successfully sent to {$sent['count']} out of {$sent['total']} selected members.";
				}
				else
				{
					$mailout->generateCsv();
				}
			}
			
			$this->render('mailout', array(
				'mailout' => $mailout,
				'search' => $search,
				'result' => $result
			));	
			return;
		}
		elseif (!empty($_POST['SearchForm']))
		{
            // process the search form
			$search->attributes = $_POST['SearchForm'];
			if ($search->validate())
			{
				Yii::app()->session['mailout-search'] = $search;
				$this->render('mailout', array(
					'mailout' => $mailout,
					'search' => $search,
					'result' => $result
				));	
				return;
			}
		}

        // default view if nothing is submitted will be the search page
		$this->render('search', array(
			'model' => $search,
			'method' => 'POST'
		));
	}
	
    /**
     * This action was written simply to make more SEO friendly
     * urls. Wrapper for memberlist. (Pretty silly, I know)
     */
	public function actionSearch()
	{
		$this->actionMemberlist();
	}
	
    /**
     * Action for the memberlist page.
     * The memberlist is generated based on search results
     * which are generated by using the SearchForm criteria.
     * The results support pagination.
     */
	public function actionMemberlist()
	{
        // Initialize the search form.
		$search = new SearchForm();
		
        // Use GET requests to handle page-to-page navigation easier.
        // an alternative (if you don't like the long URL generated by a search)
        // is to store the search results in the session (see actionMailout)
		if (!empty($_GET['SearchForm']))
		{
			$search->attributes = $_GET['SearchForm'];
			if ($search->validate())
			{
                // Try to obtain the current page number from the URL, or default to page 1.
				$currentPage = (isset($_GET['page']) && is_numeric($_GET['page']) ? $_GET['page'] : 1);
                // create pagination.
				$pagination = new CPagination();
				$pagination->setPageSize(10);
				$pagination->setCurrentPage($currentPage - 1);
				
                // init the data provider for the current pagination and search criteria.
				$dataProvider=new CActiveDataProvider('Membership', array(
					'criteria'=>$search->getSearchCriteria(),
					'pagination'=>$pagination
				));

                // render the results view.
				$this->render('memberlist', array(
					'dataProvider' => $dataProvider
				));				
				return;
			}
		}
        
        // default to the search view.
		$this->render('search', array(
			'model' => $search,
			'method' => 'GET'
		));
	}

    /**
     * Admin editing functionality to edit
     * other members' details. Limited fields
     * can be modified by the admin, as well as
     * some fields that the members themselves 
     * cannot change
     */
	public function actionEdit()
	{
        // Ensure a membership ID has been provided in the request, if not go back to the search page.
		if (!isset($_GET['id']))
			$this->redirect('memberlist');

        // Try to find a member with the corresponding ID.
		$membership = Membership::model()->find("LOWER(membershipId)=LOWER(?)", array($_GET['id']));
		$edit = new AdminEditForm();
		
        // prefill the attributes.
		if ($membership !== NULL)
			$edit->attributes = $membership->attributes;
		
        // results to pass to the view.
		$result = array(
			'complete' => false,
			'success' => false,
			'message' => '',
			'heading' => ''
		);
		
        // Editing form has been submitted.
		if (isset($_POST['AdminEditForm']))
		{
            // Set the form attributes with new data
			$edit->attributes = $_POST['AdminEditForm'];
			if ($edit->validate())
			{
				$result['complete'] = true;
				// Overwrite the membership's old data with the new data.
				$membership->attributes = $edit->attributes;
				if ($membership->save()) // attempt to save the data (should succeed unless the schema changes, or the database is offline)
				{
					$result['success'] = true;
					$result['heading'] = 'Success!';
					$result['message'] = "Membership '<strong>{$membership->membershipId}</strong>' has successfully had its details updated.";
				}
				else
				{
                    // error logging
					$msg = print_r($membership->errors, true);
					Yii::app()->error->report($msg, __FILE__);
					
					$result['message'] = 'An unforseen error occurred with the application. Please try again. If the problem persists, please contact support at <a href="mailto:support@svenskaklubben.org.au">support@svenskaklubben.org.au</a>';
					$result['heading'] = "Unsuccessful!";
				}
			}
		}
		
		$this->render('edit', array(
			'model' => $edit,
			'membershipId' => $membership !== NULL ? $membership->membershipId : NULL,
			'result' => $result
		));
		
	}
}
